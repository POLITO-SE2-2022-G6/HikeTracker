generator client {
  provider = "prisma-client-js"
}

generator frontend {
  provider = "prisma-client-js"
  output   = "../../frontend/src/generated/prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model Hut {
  id          Int     @id @default(autoincrement())
  name        String?
  description String?
  altitude    Float?
  beds        Int?
  phone       String?
  email       String?
  website     String?
  point       Point?  @relation("refHut", fields: [pointid], references: [id], onDelete: Cascade)
  pointid     Int?    @unique
  hikes       Hike[]  @relation("huts")
  hworker     User[]  @relation("hworker")
}

model ParkingLot {
  id          Int     @id @default(autoincrement())
  description String?
  name        String?
  position    String?
  capacity    Int?
  point       Point?  @relation("refPL", fields: [pointid], references: [id], onDelete: Cascade)
  pointid     Int?    @unique
}

model Point {
  id         Int         @id @default(autoincrement())
  label      String?
  latitude   Float?
  longitude  Float?
  elevation  Float?
  city       String?
  region     String?
  province   String?
  parkinglot ParkingLot? @relation("refPL")
  hut        Hut?        @relation("refHut")
  endof      Hike[]      @relation("end")
  startof    Hike[]      @relation("start")
  hikes      Hike[]      @relation("hikes")
  hikers     UserHikes[] @relation("hiker")
}

model Hike {
  id               Int         @id @default(autoincrement())
  title            String
  length           Float
  expected_time    Int
  ascent           Float
  difficulty       Int
  description      String?
  startpointid     Int?
  endpointid       Int?
  gpstrack         String?
  conditions       String      @default("open")
  conddescription  String?
  localguideid     Int?
  localguide       User?       @relation("guide", fields: [localguideid], references: [id])
  end_point        Point?      @relation("end", fields: [endpointid], references: [id])
  start_point      Point?      @relation("start", fields: [startpointid], references: [id])
  reference_points Point[]     @relation("hikes")
  huts             Hut[]       @relation("huts")
  hikers           UserHikes[] @relation("hikes")
}

model Performance {
  id         Int   @id @default(autoincrement())
  length     Float @default(0)
  duration   Int   @default(0)
  altitude   Float @default(0)
  difficulty Int   @default(0)
  hiker      User? @relation("perf", fields: [hikerid], references: [id], onDelete: SetNull)
  hikerid    Int?  @unique
}

model User {
  id          Int          @id @default(autoincrement())
  type        String
  email       String       @unique
  username    String
  phoneNumber String       @unique
  verified    Boolean      @default(false)
  hut         Hut?         @relation("hworker", fields: [hutid], references: [id], onDelete: SetNull)
  hutid       Int?         @unique
  hikeslist   Hike[]       @relation("guide")
  hikesDone   UserHikes[]  @relation("hiker")
  performance Performance? @relation("perf")
}

model UserHikes {
  id          Int      @id @default(autoincrement())
  user        User     @relation("hiker", fields: [user_id], references: [id])
  user_id     Int
  hike        Hike     @relation("hikes", fields: [hike_id], references: [id])
  hike_id     Int
  status      String   @default("ongoing")
  startedAt   DateTime @default(now()) 
  refPoint    Point    @relation("hiker", fields: [refPoint_id], references: [id])
  refPoint_id Int
}
